"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5624],{5190:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"USAGE","title":"Usage","description":"Basic example and configuration.","source":"@site/docs/USAGE.md","sourceDirName":".","slug":"/USAGE","permalink":"/jwt-utils/docs/USAGE","draft":false,"unlisted":false,"editUrl":"https://github.com/The-Node-Forge/jwt-utils/tree/main/docs/docs/USAGE.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Usage","description":"Basic example and configuration.","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Installation","permalink":"/jwt-utils/docs/INSTALLATION"},"next":{"title":"API Reference","permalink":"/jwt-utils/docs/API_REFERENCE"}}');var o=s(4848),c=s(8453);const t={title:"Usage",description:"Basic example and configuration.",sidebar_position:3},i=void 0,a={},d=[{value:"Basic Example",id:"basic-example",level:2},{value:"Generating Access and Refresh Tokens",id:"generating-access-and-refresh-tokens",level:3},{value:"** Generate a Token (custom options)**",id:"-generate-a-token-custom-options",level:3},{value:"Verifying a JWT",id:"verifying-a-jwt",level:3},{value:"Verifying a Refresh Token",id:"verifying-a-refresh-token",level:3},{value:"Configuration",id:"configuration",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"basic-example",children:"Basic Example"}),"\n",(0,o.jsx)(n.h3,{id:"generating-access-and-refresh-tokens",children:"Generating Access and Refresh Tokens"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import { generateTokens } from '@the-node-forge/jwt-utils';\n\nconst accessSecret = 'your-access-secret';\nconst refreshSecret = 'your-refresh-secret';\n\nconst { accessToken, refreshToken } = generateTokens(\n  { id: 'user123', role: 'admin' },\n  accessSecret,\n  refreshSecret,\n);\nconsole.log('Access Token:', accessToken);\nconsole.log('Refresh Token:', refreshToken);\nconst token = generateTokens({ id: 'user123', role: 'admin' });\n\nconsole.log(token);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"-generate-a-token-custom-options",children:"** Generate a Token (custom options)**"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const { accessToken, refreshToken } = generateTokens(\n  { id: 'user123', role: 'admin' },\n  accessSecret,\n  refreshSecret,\n  {\n    accessExpiresIn: '1h', // Custom access token expiry\n    refreshExpiresIn: '7d', // Custom refresh token expiry\n    algorithm: 'HS512', // Stronger algorithm\n    audience: 'my-app',\n    issuer: 'my-auth-service',\n  },\n);\n\nconsole.log('Access Token:', accessToken);\nconsole.log('Refresh Token:', refreshToken);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"verifying-a-jwt",children:"Verifying a JWT"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import { verifyToken, verifyRefreshToken } from '@the-node-forge/jwt-utils';\n\n// no options\nconst decodedAccess = verifyToken(accessToken, accessSecret);\nconst decodedRefresh = verifyRefreshToken(refreshToken, refreshSecret);\n\n// custom options\nconst decodedAccess = verifyToken(accessToken, accessSecret, {\n  audience: 'my-app',\n  issuer: 'auth-service',\n});\n\nconst decodedRefresh = verifyRefreshToken(refreshToken, refreshSecret, {\n  audience: 'my-app',\n  issuer: 'auth-service',\n});\n\nconsole.log('Decoded Access Token:', decodedAccess);\nconsole.log('Decoded Refresh Token:', decodedRefresh);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"verifying-a-refresh-token",children:"Verifying a Refresh Token"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import { verifyRefreshToken } from '@the-node-forge/jwt-utils';\n\nconst refreshToken = 'your_refresh_jwt_token_here';\nconst refreshSecret = 'your-refresh-secret';\n\n// no options\nconst decoded = verifyRefreshToken(refreshToken, refreshSecret);\n\n// custom options\nconst decoded = verifyRefreshToken(refreshToken, refreshSecret, {\n  audience: 'my-app',\n  issuer: 'auth-service',\n});\n\nif (decoded) {\n  console.log('Refresh token is valid:', decoded);\n} else {\n  console.log('Invalid or expired refresh token');\n}\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,o.jsx)(n.p,{children:"JWT expiration can be configured in seconds, minutes, hours, or days:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "accessExpiresIn": "15m",\n  "refreshExpiresIn": "1d"\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["For detailed API usage, see the ",(0,o.jsx)(n.a,{href:"/jwt-utils/docs/API_REFERENCE",children:"API Reference"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>i});var r=s(6540);const o={},c=r.createContext(o);function t(e){const n=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),r.createElement(c.Provider,{value:n},e.children)}}}]);