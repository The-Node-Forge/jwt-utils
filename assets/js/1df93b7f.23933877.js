"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4583],{8574:(e,n,s)=>{s.r(n),s.d(n,{default:()=>l});var r=s(797),t=s(1410),o=(s(6540),s(4848)),i=s(8453);function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)("div",{align:"center",children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"jwt-utils",children:"JWT Utils"})}),(0,o.jsx)(n.h2,{id:"lightweight-jwt-authentication-for-nodejs",children:"Lightweight JWT Authentication for Node.js"}),(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://opensource.org/licenses/MIT",children:(0,o.jsx)(n.img,{src:"https://img.shields.io/badge/License-MIT-yellow.svg",alt:"License: MIT"})})}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://www.npmjs.com/package/@the-node-forge/jwt-utils",children:(0,o.jsx)(n.img,{src:"https://img.shields.io/npm/v/@the-node-forge/jwt-utils",alt:"NPM Version"})}),"\n",(0,o.jsx)(n.a,{href:"https://github.com/The-Node-Forge/jwt-utils/actions",children:(0,o.jsx)(n.img,{src:"https://img.shields.io/github/actions/workflow/status/the-node-forge/jwt-utils/ci.yaml?branch=main",alt:"Build Status"})})]}),(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://the-node-forge.github.io/jwt-utils/",children:"Live Documentation"})})]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"A fast, lightweight Node.js JWT library for generating, verifying, and managing\nJSON Web Tokens (JWTs). Supports authentication and token-based authorization for\nAPIs built with Express, Fastify, Koa, Hapi, NestJS, and Next.js. Ideal for securing\nweb applications, handling user authentication, and implementing role-based access\ncontrol (RBAC)."})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"JWT Utils"})," is a fast, lightweight, and framework-agnostic Node.js library for\ngenerating, verifying, and managing JSON Web Tokens (JWTs). It simplifies\nauthentication and token-based authorization for web applications and APIs."]}),"\n",(0,o.jsx)(n.h2,{id:"-features",children:(0,o.jsx)(n.strong,{children:"\ud83d\ude80 Features"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\u2705 ",(0,o.jsx)(n.strong,{children:"Generate JWTs"})," \u2013 Create signed JWTs with custom payloads and expiration\ntimes."]}),"\n",(0,o.jsxs)(n.li,{children:["\u2705 ",(0,o.jsx)(n.strong,{children:"Verify JWTs"})," \u2013 Securely decode and verify tokens."]}),"\n",(0,o.jsxs)(n.li,{children:["\u2705 ",(0,o.jsx)(n.strong,{children:"Access & Refresh Tokens"})," \u2013 Implement authentication with refresh token\nsupport."]}),"\n",(0,o.jsxs)(n.li,{children:["\u2705 ",(0,o.jsx)(n.strong,{children:"Framework-Agnostic Middleware"})," \u2013 Works with Express, Fastify, Koa, Hapi,\nNestJS, and Next.js."]}),"\n",(0,o.jsxs)(n.li,{children:["\u2705 ",(0,o.jsx)(n.strong,{children:"RBAC Middleware"})," \u2013 Control access based on user roles."]}),"\n",(0,o.jsxs)(n.li,{children:["\u2705 ",(0,o.jsx)(n.strong,{children:"TypeScript Support"})," \u2013 Fully typed for safer development."]}),"\n",(0,o.jsxs)(n.li,{children:["\u2705 ",(0,o.jsx)(n.strong,{children:"Lightweight & Secure"})," \u2013 Uses ",(0,o.jsx)(n.code,{children:"jsonwebtoken"})," with best security practices."]}),"\n",(0,o.jsxs)(n.li,{children:["\u2705 Generate and verify ",(0,o.jsx)(n.strong,{children:"JWTs"})," easily"]}),"\n",(0,o.jsxs)(n.li,{children:["\u2705 Support for ",(0,o.jsx)(n.strong,{children:"Fastify, Koa, and Express"})," middleware"]}),"\n",(0,o.jsx)(n.li,{children:"\u2705 Framework-agnostic core utilities"}),"\n",(0,o.jsxs)(n.li,{children:["\u2705 Lightweight and ",(0,o.jsx)(n.strong,{children:"dependency-free"})]}),"\n",(0,o.jsxs)(n.li,{children:["\u2705 Built-in ",(0,o.jsx)(n.strong,{children:"security best practices"})]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-installation",children:(0,o.jsx)(n.strong,{children:"\ud83d\udce6 Installation"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"npm install @the-node-forge/jwt-utils\n"})}),"\n",(0,o.jsx)(n.p,{children:"or"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"yarn add @the-node-forge/jwt-utils\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-usage",children:(0,o.jsx)(n.strong,{children:"\ud83d\udd27 Usage"})}),"\n",(0,o.jsx)(n.h3,{id:"generating-access--refresh-tokens",children:(0,o.jsx)(n.strong,{children:"Generating Access & Refresh Tokens"})}),"\n",(0,o.jsx)(n.h3,{id:"1\u20e3-generate-a-token-no-options",children:(0,o.jsx)(n.strong,{children:"1\u20e3 Generate a Token (no options)"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import { generateTokens } from '@the-node-forge/jwt-utils';\n\nconst accessSecret = 'your-access-secret';\nconst refreshSecret = 'your-refresh-secret';\n\nconst { accessToken, refreshToken } = generateTokens(\n  { id: 'user123', role: 'admin' },\n  accessSecret,\n  refreshSecret,\n);\nconsole.log('Access Token:', accessToken);\nconsole.log('Refresh Token:', refreshToken);\nconst token = generateTokens({ id: 'user123', role: 'admin' });\n\nconsole.log(token);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"-generate-a-token-custom-options",children:"** Generate a Token (custom options)**"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const { accessToken, refreshToken } = generateTokens(\n  { id: 'user123', role: 'admin' },\n  accessSecret,\n  refreshSecret,\n  {\n    accessExpiresIn: '1h', // Custom access token expiry\n    refreshExpiresIn: '7d', // Custom refresh token expiry\n    algorithm: 'HS512', // Stronger algorithm\n    audience: 'my-app',\n    issuer: 'my-auth-service',\n  },\n);\n\nconsole.log('Access Token:', accessToken);\nconsole.log('Refresh Token:', refreshToken);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"verifying-tokens",children:(0,o.jsx)(n.strong,{children:"Verifying Tokens"})}),"\n",(0,o.jsx)(n.h3,{id:"2\u20e3-verify-a-token",children:(0,o.jsx)(n.strong,{children:"2\u20e3 Verify a Token"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import { verifyToken, verifyRefreshToken } from '@the-node-forge/jwt-utils';\n\n// no options\nconst decodedAccess = verifyToken(accessToken, accessSecret);\nconst decodedRefresh = verifyRefreshToken(refreshToken, refreshSecret);\n\n// custom options\nconst decodedAccess = verifyToken(accessToken, accessSecret, {\n  audience: 'my-app',\n  issuer: 'auth-service',\n});\n\nconst decodedRefresh = verifyRefreshToken(refreshToken, refreshSecret, {\n  audience: 'my-app',\n  issuer: 'auth-service',\n});\n\nconsole.log('Decoded Access Token:', decodedAccess);\nconsole.log('Decoded Refresh Token:', decodedRefresh);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"verifying-a-refresh-token",children:"Verifying a Refresh Token"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import { verifyRefreshToken } from '@the-node-forge/jwt-utils';\n\nconst refreshToken = 'your_refresh_jwt_token_here';\nconst refreshSecret = 'your-refresh-secret';\n\n// no options\nconst decoded = verifyRefreshToken(refreshToken, refreshSecret);\n\n// custom options\nconst decoded = verifyRefreshToken(refreshToken, refreshSecret, {\n  audience: 'my-app',\n  issuer: 'auth-service',\n});\n\nif (decoded) {\n  console.log('Refresh token is valid:', decoded);\n} else {\n  console.log('Invalid or expired refresh token');\n}\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.h2,{id:"-integration-with-web-frameworks",children:["\ud83d\ude80 ",(0,o.jsx)(n.strong,{children:"Integration with Web Frameworks"})]}),"\n",(0,o.jsx)(n.h3,{id:"express-middleware",children:(0,o.jsx)(n.strong,{children:"Express Middleware"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import express from 'express';\nimport {\n  authenticateToken,\n  authenticateRefreshToken,\n} from '@the-node-forge/jwt-utils/middleware/express';\n\nconst app = express();\napp.use(express.json());\n\nconst ACCESS_SECRET = 'your-access-secret';\nconst REFRESH_SECRET = 'your-refresh-secret';\n\nconst user = {\n  id: '123',\n  role: 'admin',\n};\n\n// Generate tokens\napp.post('/login', (req, res) => {\n  const tokens = generateTokens(user, ACCESS_SECRET, REFRESH_SECRET);\n  res.json(tokens);\n});\n\n// Protected route\napp.get('/protected', authenticateToken(ACCESS_SECRET), (req, res) => {\n  res.json({ message: 'Access granted', user: req.user });\n});\n\n// Refresh token route\napp.post('/refresh', authenticateRefreshToken(REFRESH_SECRET), (req, res) => {\n  const { exp, iat, ...userData } = req.user; // token returns exp, iat, id and role. You only want to pass in the users data for a refresh token\n\n  const newTokens = generateTokens(userData, ACCESS_SECRET, REFRESH_SECRET);\n  res.json(newTokens);\n});\n"})}),"\n",(0,o.jsx)(n.h3,{id:"fastify-middleware",children:(0,o.jsx)(n.strong,{children:"Fastify Middleware"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import Fastify from 'fastify';\nimport {\n  authenticateToken,\n  authenticateRefreshToken,\n} from '@the-node-forge/jwt-utils/middleware/fastify';\nimport { generateTokens } from '@the-node-forge/jwt-utils';\n\nconst app = Fastify();\n\nconst ACCESS_SECRET = 'your-access-secret';\nconst REFRESH_SECRET = 'your-refresh-secret';\n\nconst user = {\n  id: '123',\n  role: 'admin',\n};\n\n// Generate tokens\napp.post('/login', async (req, reply) => {\n  const tokens = generateTokens(user, ACCESS_SECRET, REFRESH_SECRET);\n  reply.send(tokens);\n});\n\n// Protected route\napp.get(\n  '/protected',\n  { preHandler: authenticateToken(ACCESS_SECRET) },\n  async (req, reply) => {\n    reply.send({ message: 'Access granted', user: req.user });\n  },\n);\n\n// Refresh token route\napp.post(\n  '/refresh',\n  { preHandler: authenticateRefreshToken(REFRESH_SECRET) },\n  async (req, reply) => {\n    const { exp, iat, ...userData } = req.user; // Strip exp & iat before regenerating tokens\n\n    const newTokens = generateTokens(userData, ACCESS_SECRET, REFRESH_SECRET);\n    reply.send(newTokens);\n  },\n);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"koa-middleware",children:(0,o.jsx)(n.strong,{children:"Koa Middleware"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import Koa from 'koa';\nimport Router from '@koa/router';\nimport bodyParser from 'koa-bodyparser';\nimport {\n  authenticateToken,\n  authenticateRefreshToken,\n} from '@the-node-forge/jwt-utils/middleware/koa';\nimport { generateTokens } from '@the-node-forge/jwt-utils';\n\nconst app = new Koa();\nconst router = new Router();\n\nconst ACCESS_SECRET = 'your-access-secret';\nconst REFRESH_SECRET = 'your-refresh-secret';\n\nconst user = {\n  id: '123',\n  role: 'admin',\n};\n\napp.use(bodyParser()); // Parse JSON body\n\n// Generate tokens\nrouter.post('/login', async (ctx) => {\n  const tokens = generateTokens(user, ACCESS_SECRET, REFRESH_SECRET);\n  ctx.body = tokens;\n});\n\n// Protected route\nrouter.get('/protected', authenticateToken(ACCESS_SECRET), async (ctx) => {\n  ctx.body = { message: 'Access granted', user: ctx.state.user };\n});\n\n// Refresh token route\nrouter.post('/refresh', authenticateRefreshToken(REFRESH_SECRET), async (ctx) => {\n  const { exp, iat, ...userData } = ctx.state.user; // Strip exp & iat before regenerating tokens\n\n  const newTokens = generateTokens(userData, ACCESS_SECRET, REFRESH_SECRET);\n  ctx.body = newTokens;\n});\n"})}),"\n",(0,o.jsx)(n.h3,{id:"hapi-middleware",children:(0,o.jsx)(n.strong,{children:"Hapi Middleware"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import Hapi from '@hapi/hapi';\nimport {\n  authenticateToken,\n  authenticateRefreshToken,\n} from '@the-node-forge/jwt-utils/middleware/hapi';\nimport { generateTokens } from '@the-node-forge/jwt-utils';\n\nconst server = Hapi.server({\n  port: 3000,\n  host: 'localhost',\n});\n\nconst ACCESS_SECRET = 'your-access-secret';\nconst REFRESH_SECRET = 'your-refresh-secret';\n\nconst user = {\n  id: '123',\n  role: 'admin',\n};\n\n// Generate tokens\nserver.route({\n  method: 'POST',\n  path: '/login',\n  handler: (request, h) => {\n    const tokens = generateTokens(user, ACCESS_SECRET, REFRESH_SECRET);\n    return h.response(tokens).code(200);\n  },\n});\n\n// Protected route\nserver.route({\n  method: 'GET',\n  path: '/protected',\n  options: { pre: [{ method: authenticateToken(ACCESS_SECRET) }] },\n  handler: (request, h) => {\n    return h.response({ message: 'Access granted', user: request.app.user });\n  },\n});\n\n// Refresh token route\nserver.route({\n  method: 'POST',\n  path: '/refresh',\n  options: { pre: [{ method: authenticateRefreshToken(REFRESH_SECRET) }] },\n  handler: (request, h) => {\n    const { exp, iat, ...userData } = request.app.user; // Strip exp & iat before regenerating tokens\n\n    const newTokens = generateTokens(userData, ACCESS_SECRET, REFRESH_SECRET);\n    return h.response(newTokens).code(200);\n  },\n});\n\n// Start server\nconst start = async () => {\n  await server.start();\n  console.log('Server running on http://localhost:3000');\n};\n\nstart();\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.h2,{id:"-role-based-access-control-rbac-using-express",children:["\ud83d\udee1 ",(0,o.jsx)(n.strong,{children:"Role-Based Access Control (RBAC) using express"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import express from 'express';\nimport { authenticateToken } from '@the-node-forge/jwt-utils/middleware/express';\nimport { authorizeRoles } from '@the-node-forge/jwt-utils/middleware/rbac';\n\nconst app = express();\nconst ACCESS_SECRET = 'your-access-secret';\n\n// Admin route (requires authentication + admin role)\napp.get(\n  '/admin',\n  authenticateToken(ACCESS_SECRET), // Ensure user is authenticated\n  authorizeRoles('admin'), // Ensure user has the 'admin' role\n  (req, res) => {\n    res.json({ message: 'Welcome Admin', user: req.user });\n  },\n);\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-security-best-practices",children:(0,o.jsx)(n.strong,{children:"\ud83d\udd12 Security Best Practices"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Always use ",(0,o.jsx)(n.strong,{children:"secure, long, randomly generated"})," secret keys in production."]}),"\n",(0,o.jsxs)(n.li,{children:["Store ",(0,o.jsx)(n.strong,{children:"tokens in HTTP-only cookies"})," instead of local storage when possible."]}),"\n",(0,o.jsxs)(n.li,{children:["Implement ",(0,o.jsx)(n.strong,{children:"refresh tokens"})," for long-term authentication."]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-license",children:(0,o.jsx)(n.strong,{children:"\ud83c\udf0d License"})}),"\n",(0,o.jsxs)(n.p,{children:["This project is licensed under the ",(0,o.jsx)(n.strong,{children:"MIT License"}),"."]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-contributing",children:(0,o.jsx)(n.strong,{children:"\ud83e\udd1d Contributing"})}),"\n",(0,o.jsxs)(n.p,{children:["Want to suggest a feature? Open an\n",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"https://github.com/the-node-forge/jwt-utils/issues",children:"issue"})})," or ",(0,o.jsx)(n.strong,{children:"contribute"}),"!"]}),"\n",(0,o.jsx)(n.p,{children:"We welcome contributions!"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Fork the repository"}),"\n",(0,o.jsxs)(n.li,{children:["Create a feature branch (",(0,o.jsx)(n.code,{children:"git checkout -b feature-name"}),")"]}),"\n",(0,o.jsxs)(n.li,{children:["Commit your changes (",(0,o.jsx)(n.code,{children:"git commit -m 'Add feature'"}),")"]}),"\n",(0,o.jsxs)(n.li,{children:["Push to the branch (",(0,o.jsx)(n.code,{children:"git push origin feature-name"}),")"]}),"\n",(0,o.jsx)(n.li,{children:"Open a pull request"}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-support--links",children:(0,o.jsx)(n.strong,{children:"\ud83c\udf1f Support & Links"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"NPM Package"}),":\n",(0,o.jsx)(n.a,{href:"https://www.npmjs.com/package/@the-node-forge/jwt-utils",children:"@the-node-forge/jwt-utils"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"GitHub Repo"}),":\n",(0,o.jsx)(n.a,{href:"https://github.com/the-node-forge/jwt-utils",children:"The Node Forge / JWT Utils"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Issues & Feature Requests"}),":\n",(0,o.jsx)(n.a,{href:"https://github.com/the-node-forge/jwt-utils/issues",children:"Open an Issue"})]}),"\n"]})]})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}var d=s(9030);function h(){return(0,o.jsxs)("main",{className:"container margin-vert--lg",children:[(0,o.jsxs)("div",{style:{textAlign:"center",marginBottom:"2rem"},children:[(0,o.jsx)("img",{src:(0,d.Ay)("/img/theNodeForge.png"),alt:"The Node Forge Logo",width:150,height:150,style:{borderRadius:"50%"}}),(0,o.jsx)("h1",{style:{marginTop:"1rem",fontSize:"2rem"},children:"The Node Forge presents:"})]}),(0,o.jsx)(a,{})]})}function l(){const{siteConfig:e}=(0,r.A)();return(0,o.jsx)(t.A,{title:`${e.projectName}`,description:"A fully-configured TypeScript NPM package template with built-in CI/CD, automated tests, ESLint, Prettier, and Docusaurus documentation. Get started quickly with best practices for package development",children:(0,o.jsx)("main",{children:(0,o.jsx)(h,{})})})}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>c});var r=s(6540);const t={},o=r.createContext(t);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);